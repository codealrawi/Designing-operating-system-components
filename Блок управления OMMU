class MMU
{
private:
	Memory * memory;

public:
	MMU(Memory &memory) { this->memory = &memory; } /* загрузка программы из образа процесса в основную память */

	virtual void swapIn(ProcessImage * processImage)
	{ // получить программу из образа процесса 
		Memory * code = processImage->getCode(); /* получить адрес размещения программы в оперативной памяти, если он был */
		int addrPCB = processImage->getAddr();
		int addrReal = getRealAddr(); /* адрес размещения программы */

		if (addrPCB == -1)
		{ //не присвоен
		  /* если PC = -1, то PC не проинициализирован присвоить начало программы */
			processImage->getSysReg()->setState(PC, addrReal);
		}
		else
		{
			/* размещение программ в памяти 1. определить смещение PC - addrPCB, изменить адрес PC */
			int addrOffPC = processImage->getSysReg()->getState(PC) - addrPCB;
			processImage->getSysReg()->setState(PC, addrOffPC + addrReal);
		}

		// запомнить адрес в блоке PCB 
		processImage->setAddr(addrReal);

		/* установить адрес размещения программы в оперативной памяти */
		setAlloc(addrReal);

		// прочитать блок кода, начало программы в образе 
		Block * block = NULL;
		for (int i = 0; i < code->getSizeMemory(); i++)
		{
			block = code->read(i);
			/* код программы читается с 0 адреса */
			/* записать блок в память только последовательно, на незанятые блоки */
			if (!block->getState())
			{
				memory->setCmd(block->getCode(), block->getNregister(), block->getOperand());
			}
		}
	}
